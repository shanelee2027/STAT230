size=length(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "no"]),
replace=TRUE))
measles_bootstrap2[i] <- mean(
sample(
datacombined$Measles_Diff[datacombined$GNI_over_8000 == "yes"],
size=length(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "yes"]),
replace=TRUE))
}
quantile(measles_bootstrap1, c(0.025, 0.975))
quantile(measles_bootstrap2, c(0.025, 0.975))
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_bootstrap <- 10000
measles_bootstrap1 <- c()
measles_bootstrap2 <- c()
for (i in 1:n_bootstrap) {
measles_bootstrap1[i] <- mean(
sample(
datacombined$Measles_Diff[datacombined$GNI_over_8000 == "no"],
size=length(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "no"]),
replace=TRUE))
measles_bootstrap2[i] <- mean(
sample(
datacombined$Measles_Diff[datacombined$GNI_over_8000 == "yes"],
size=length(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "yes"]),
replace=TRUE))
}
quantile(measles_bootstrap1, c(0.025, 0.975))
quantile(measles_bootstrap2, c(0.025, 0.975))
hist(measles_bootstrap1)
hist(measles_bootstrap2)
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_bootstrap <- 10000
measles_bootstrap1 <- c()
measles_bootstrap2 <- c()
for (i in 1:n_bootstrap) {
measles_bootstrap1[i] <- mean(
sample(
datacombined$Measles_Diff[datacombined$GNI_over_8000 == "no"],
size=length(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "no"]),
replace=TRUE))
measles_bootstrap2[i] <- mean(
sample(
datacombined$Measles_Diff[datacombined$GNI_over_8000 == "yes"],
size=length(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "yes"]),
replace=TRUE))
}
quantile(measles_bootstrap1, c(0.025, 0.975))
quantile(measles_bootstrap2, c(0.025, 0.975))
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
}
fakedata <- sample(datacombined)
fakedata
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
}
fakedata <- sample(datacombined)
fakedata
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
perm_diffs
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
perm_diffs
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
fakedata
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
perm_diffs
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
print(fakedata)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
perm_diffs
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
table(fakedata)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
perm_diffs
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
print(table(fakedata))
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
perm_diffs
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 3
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
print(fakedata)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
perm_diffs
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 10
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
perm_diffs
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 30
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
perm_diffs
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
hist(perm_diffs)
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
hist(perm_diffs,
breaks=30)
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
hist(perm_diffs,
breaks=15)
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
hist(perm_diffs,
breaks=15)
abline(v=(median(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "yes"])
- median(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "no"])),
lwd=3,
col="red")
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
true_diff <- (median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "yes"])
- median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "no"]))
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
hist(perm_diffs,
breaks=15)
abline(v = true_diff,
lwd=3,
col="red")
?t.test
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
true_diff <- (median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "yes"])
- median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "no"]))
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
quantile(perm_diffs, c(0.005, 0.995))
hist(perm_diffs,
breaks=15)
abline(v = true_diff,
lwd=3,
col="red")
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
true_diff <- (median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "yes"])
- median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "no"]))
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
mean(abs(perm_diffs) >= abs(actualdiff))
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
true_diff <- (median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "yes"])
- median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "no"]))
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
mean(abs(perm_diffs) >= abs(true_diff))
hist(perm_diffs,
breaks=15)
abline(v = true_diff,
lwd=3,
col="red")
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
true_diff <- (median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "yes"])
- median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "no"]))
true_diff
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
mean(abs(perm_diffs) >= abs(true_diff))
hist(perm_diffs,
breaks=15)
abline(v = true_diff,
lwd=3,
col="red")
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
true_diff <- (median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "yes"])
- median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "no"]))
true_diff
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
mean(abs(perm_diffs) >= abs(true_diff))
hist(perm_diffs,
breaks=15)
abline(v = true_diff,
lwd=3,
col="red")
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
true_diff <- (median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "yes"])
- median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "no"]))
true_diff
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
mean(abs(perm_diffs) >= abs(true_diff))
hist(perm_diffs,
breaks=15,
xlab="Difference in Change in Rate (in Percentage Points)",
main="Permutated Sample Median Difference in Change in Measles
Vaccination Rate")
abline(v = true_diff,
lwd=3,
col="red")
knitr::opts_chunk$set(echo = TRUE)
nh2017 <- read.csv("http://reuningscherer.net/s&ds230/data/NHRR2017.csv")
nh2018 <- read.csv("http://reuningscherer.net/s&ds230/data/NHRR2018.csv")
head(nh2017)
head(nh2018)
names(nh2017)
names(nh2018)
library(lubridate)
convertTimes <- function(v) {
hourplus <- nchar(v) == 7
wrongformat <- nchar(v) == 8
outtimes <- ms(v)
if (sum(hourplus) > 0) { # if there is at least 1 time that exceeds 1 hr
outtimes[hourplus] <- hms(v[hourplus])
}
if (sum(wrongformat) > 0) { # if there is at least 1 time in wrong format
outtimes[wrongformat] <- ms(substr(v[wrongformat],1,5))
}
outtimes <- as.numeric(outtimes)/60
return(outtimes)
}
cleanNHData <- function(data) {
data[data$Div == "",]$Div <- NA
data$Gender <- substr(data$Div, 1, 1)
data$AgeGrp <- substr(data$Div, 2, nchar(data$Div))
data$Nettime_min <- convertTimes(data$Nettime)
data$Time_min <- convertTimes(data$Time)
data$Pace_min <- convertTimes(data$Pace)
data <- data[data$Name != "", ]
return(data)
}
#run cleanNHData on nh2018 and nh2017 and replace these with the cleaned up
# versions of themselves
nh2017 <- cleanNHData(nh2017)
nh2018 <- cleanNHData(nh2018)
head(nh2017, 10)
head(nh2018, 10)
duplicated(c("cat", "cat", "dog", "llama"))
nh2017Unq <- nh2017[!duplicated(nh2017$Name),]
nh2018Unq <- nh2018[!duplicated(nh2018$Name),]
dim(nh2017)
dim(nh2017Unq)
dim(nh2018)
dim(nh2018Unq)
intersect(c("cat", "dog", "llama"), c("cat", "llama", "chincilla"))
repeatrunners <- intersect(nh2017Unq$Name, nh2018Unq$Name)
length(repeatrunners)
# creates a boolean vector that is "TRUE" if the observation name is in
# repeatrunners and "FALSE" otherwise
w <- nh2018Unq$Name %in% repeatrunners
# creates a new dataframe from the 2018 dataset containing only the names,
# genders, and net times of repeat runners (entries where Name is in w).
nhcombined <- data.frame(Name = nh2018Unq$Name[w],
Gender = nh2018Unq$Gender[w],
Nettime_2018 = nh2018Unq$Nettime_min[w])
# merges this new dataframe with the 2017 dataset. Since the only shared
# variable between the two dataframes is "Name", this merges by Name, which
# associates the 2018 net times with the right 2017 net times. since nhcombined
# only contains 2018 entries from repeat runners, non-repeat runners from 2017
# are dropped
nhcombined <- merge(nhcombined, nh2017Unq[, c("Name", "Nettime_min")])
# drops the rows with unspecified gender
nhcombined <- nhcombined[!is.na(nhcombined$Gender),]
# replaces the name of the column "Nettime_min" to "Nettime_2017"
colnames(nhcombined)[4] <- "Nettime_2017"
# prints the dimensions of the new dataframe
dim(nhcombined)
# prints the first few rows of the new dataframe
head(nhcombined)
nhcombined$improvement <- nhcombined$Nettime_2017 - nhcombined$Nettime_2018
summary(nhcombined$improvement)
hist(nhcombined$improvement,
breaks=50,
xlab="Improvement (minutes)",
main="Improvement in Runners' Times from 2017 to 2018")
nhcombined[abs(nhcombined$improvement) > 50,]
nhcombined <- nhcombined[abs(nhcombined$improvement) <= 50,]
hist(nhcombined$improvement,
breaks=50,
xlab="Improvement (minutes)",
main="Improvement in Runners' Times from 2017 to 2018,
Outliers Excluded")
data2016 <- read.csv("http://reuningscherer.net/S&DS230/data/WB.2016.csv")
data2024 <- read.csv("http://reuningscherer.net/S&DS230/data/WB_2024.csv")
dim(data2016)
dim(data2024)
names(data2016)
names(data2024)
data2016 <- data2016[,c("Country", "Measles", "GNI")]
data2024 <- data2024[,c("Country", "Measles", "GNI")]
w <- data2016$Country %in% intersect(data2016$Country, data2024$Country)
datacombined <- data.frame(Country = data2016$Country[w],
Measles_2016 = data2016$Measles[w],
GNI_2016 = data2016$GNI[w])
datacombined <- merge(datacombined, data2024)
colnames(datacombined)[4] = "Measles_2024"
colnames(datacombined)[5] = "GNI_2024"
datacombined <- datacombined[!(is.na(datacombined$Measles_2016)
| is.na(datacombined$Measles_2024)
| is.na(datacombined$GNI_2024)),]
datacombined$GNI_over_8000 <- factor(ifelse(datacombined$GNI_2024 > 8000,
"yes",
"no"))
datacombined$Measles_Diff <- (datacombined$Measles_2024
- datacombined$Measles_2016)
head(datacombined, 10)
summary(datacombined$Measles_Diff)
hist(datacombined$Measles_Diff,
breaks = 30,
xlab = "Change in Percentage Points",
main = "Change in Measles Vaccination Rate for Countries
from 2016 to 2024")
abline(v=0, lwd = 3, col = "red")
boxplot(datacombined$Measles_Diff ~ datacombined$GNI_over_8000,
xlab="",
ylab="Measles Difference in Percentage Points",
names = c("GNI Under 8000", "GNI Over 8000"),
main = "Change in Measles Vaccination Rate from 2016 to 2024 for
Countries Below or Above 8000 GNI")
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
n_bootstrap <- 10000
measles_bootstrap1 <- c()
measles_bootstrap2 <- c()
for (i in 1:n_bootstrap) {
measles_bootstrap1[i] <- mean(
sample(
datacombined$Measles_Diff[datacombined$GNI_over_8000 == "no"],
size=length(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "no"]),
replace=TRUE))
measles_bootstrap2[i] <- mean(
sample(
datacombined$Measles_Diff[datacombined$GNI_over_8000 == "yes"],
size=length(datacombined$Measles_Diff[datacombined$GNI_over_8000 == "yes"]),
replace=TRUE))
}
quantile(measles_bootstrap1, c(0.025, 0.975))
quantile(measles_bootstrap2, c(0.025, 0.975))
# To make grading easier, please leave the following line of code in your assignment
set.seed(230)
true_diff <- (median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "yes"])
- median(datacombined$Measles_Diff
[datacombined$GNI_over_8000 == "no"]))
true_diff
n_perm <- 10000
perm_diffs <- c()
for (i in 1:n_perm) {
fakedata <- sample(datacombined$GNI_over_8000)
perm_diffs[i] <- (median(datacombined$Measles_Diff[fakedata == "yes"])
- median(datacombined$Measles_Diff[fakedata == "no"]))
}
mean(abs(perm_diffs) >= abs(true_diff))
hist(perm_diffs,
breaks=15,
xlab="Difference in Change in Rate (in Percentage Points)",
main="Permutated Sample Median Difference in Change in Measles
Vaccination Rate")
abline(v = true_diff,
lwd=3,
col="red")
